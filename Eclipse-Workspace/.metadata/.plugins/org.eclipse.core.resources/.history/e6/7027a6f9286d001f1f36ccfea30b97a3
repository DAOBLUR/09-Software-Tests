package utest.evidencia1.tests;

import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.Test;
import utest.evidencia1.clases.CircleLinkedList;

class CircleLinkedListTest {

    @Test
    void testAddElements() {
        CircleLinkedList<Integer> list = new CircleLinkedList<>();
        list.append(1);
        list.append(2);
        list.append(3);
        assertEquals(3, list.getSize(), "Expected size of list to be 3 after adding three elements");
    }

    @Test
    void testRemoveElement() {
        CircleLinkedList<Integer> list = new CircleLinkedList<>();
        list.append(1);
        list.append(2);
        list.append(3);
        list.remove(2);
        assertEquals(2, list.getSize(), "Expected size of list to be 2 after removing one element");
    }

    @Test
    void testCircularNature() {
        CircleLinkedList<Integer> list = new CircleLinkedList<>();
        list.add(1);
        list.add(2);
        list.add(3);

        // Check circular nature by traversing through the list manually
        CircleLinkedList.Node<Integer> current = list.head;
        for (int i = 0; i < list.getSize(); i++) {
            current = current.next;
        }

        // After traversing the list 'size' times, we should be back at the head (dummy node)
        assertSame(list., current, "Expected the circular nature of the list to bring us back to the head node.");
    }
}
